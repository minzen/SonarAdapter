Goal
====
Provide a java wrapper for accesing data inside of Sonar


Deployment
==========
The wrapper will be provided as a jar archive.


Usage
=====
To query a Sonar instnance, the platform has to:
- instantiate the Class ..., providing the address and the credentials
needed for accessing this instance. This data is not persisted inside
the wrapper. 
- For querying, the plafform calls a method on the adapter.
- Error handling: in the error case, the wrapper tries to recover
(e.g. by reconnting to the instance). If recovery wasnt possible or
not successfull, an exception is thrown.


The interface
=============
First question when designing such an interface is: 
should it be syncronous or asynchronous. For simplicity we choose the
first alternative.

To query a metric from Sonar, we need following data:
- Metric name
- The object to query the metric of. Although Sonar provides the
metrics data down to the files level, we contraint it to be a project
(at least for now...). The object has to be specified using an
according Sonar identifier. Question: how does Uquasar know the
mapping uquasar project -> sonar project??


The implementation
==================

Parameter mapping & assemblying the query
-----------------------------------------
First, the metric and the object identifier has to be mapped to
the Sonar world. We do it as follows:
* Metric name: the wrapper has the build-in knowledge for doing
that. It can be configurable (via a properties file or something) or
be just hardcoded.
* Object id: Sonar uses the term 'resource' for every object which has
attached metrics data, including a project. So, to identify a project,
we have to specify the resource using the syntax
"resource=<project_key>" inside the query.

Calling Sonar
-------------
Alternatives for webservice querying libs include:
- Apache HTTPcomponents
- java.net.URL


Returning the Result
--------------------
The query result has to be parsed and returned as a UQuasar-specific
object (Measurement?).


Notes about the INTRA proposal 
==============================
- The wrapper as proposed is too heavy
- Probably we're on the same line here, but just to be sure:
* The adapter interface is owned by the platform, no?

This BindedSystem aspect is IMO not part of the interface. 

Most of the content of the model should be moved to the platform?
The platform should own the interface and 

I understand, that you've 




