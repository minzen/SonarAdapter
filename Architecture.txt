Goal
====
Provide a java wrapper for accesing data inside of Sonar


Deployment
==========
The wrapper will be provided as a jar archive.


Usage
=====
To query a Sonar instnance, the platform has to:
- instantiate the class SonarAdapter, providing the address and the credentials
needed for accessing a Sonar instance. This data is not persisted inside
the wrapper. 
- For querying, the plafform calls a method on the adapter.
- Error handling: in the error case, the wrapper tries to recover
(e.g. by reconnting to the instance). If recovery wasnt possible or
not successfull, an exception is thrown.


The interface
=============
First of all; it should be obviously synchronous.

To query a metric from Sonar, we need following data:
- Metric name
- The object to query the metric of. Although Sonar provides the
metrics data down to the files level, we contraint it to be a project
(at least for now...). The object has to be specified using an
according Sonar identifier. 


The implementation
==================

Parameter mapping & assemblying the query
-----------------------------------------
First, the metric and the project name have to be mapped to
the according names/objects in the Sonar world. We do it as follows:
* Metric name: the wrapper has the build-in knowledge for doing
that. It can be configurable (via a properties file or something) or
be just hardcoded.
* The Project name: The adapter will assume that it has been already
given the according Sonar name. To query a metric, we have to use
projects key, however. So, part of the adapters job is to map the
given name to a key. This can be done by quering all projects in the
Sonar instance along with their names and keys and building up a
suitable lookup data structure. Following aspects should be looked at,
while doing this:
- Names can be ambigous. To handle this,  

Sonar uses the term 'resource' for every object which has
attached metrics data, including a project. So, to identify a project,
we have to specify the resource using the syntax
"resource=<project_key>" inside the query.

Calling Sonar
-------------
Alternatives for webservice querying libs include:
- Apache HTTPcomponents
- java.net.URL

Returning the Result
--------------------
The query result has to be parsed and returned as a UQuasar-specific
object (Measurement?).
